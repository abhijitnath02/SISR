import os
import cv2
import torch
import torch.nn as nn
import numpy as np
from torchvision.transforms import ToTensor
from torchvision.utils import save_image
from torch.utils.data import Dataset, DataLoader


class SimpleSISRCNN(nn.Module):
    def __init__(self):
        super(SimpleSISRCNN, self).__init__()
        self.conv1 = nn.Conv2d(3, 64, kernel_size=9, padding=4)
        self.relu = nn.ReLU()
        self.conv2 = nn.Conv2d(64, 32, kernel_size=1)
        self.conv3 = nn.Conv2d(32, 3, kernel_size=5, padding=2)

    def forward(self, x):
        x = self.relu(self.conv1(x))
        x = self.relu(self.conv2(x))
        x = self.conv3(x)
        return x


class ImageDataset(Dataset):
    def __init__(self, folder):
        self.folder = folder
        self.images = [f for f in os.listdir(folder) if f.endswith(('.png', '.jpg'))]

    def __len__(self):
        return len(self.images)

    def __getitem__(self, idx):
        img_path = os.path.join(self.folder, self.images[idx])
        img = cv2.imread(img_path)
        img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)
        img = ToTensor()(img)
        return img

def process_images(input_folder, output_folder):
    # Create output folder if it doesn't exist
    os.makedirs(output_folder, exist_ok=True)

    
    model = SimpleSISRCNN().eval()

    
    dataset = ImageDataset(input_folder)
    dataloader = DataLoader(dataset, batch_size=1, shuffle=False)

    with torch.no_grad():
        for idx, img in enumerate(dataloader):
            # Perform super-resolution
            sr_img = model(img)
            output_path = os.path.join(output_folder, f"output_{idx}.png")
            save_image(sr_img, output_path)


input_folder = '/Users/devilboy/Downloads/Celebrity_Faces_Dataset'
output_folder = '/Users/devilboy/Documents/SISR OUTPUT'  
process_images(input_folder, output_folder)
